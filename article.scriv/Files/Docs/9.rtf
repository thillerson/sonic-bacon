{\rtf1\ansi\ansicpg1252\cocoartf1265\cocoasubrtf190
{\fonttbl\f0\fnil\fcharset0 Cochin;}
{\colortbl;\red255\green255\blue255;}
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\sl288\slmult1\pardirnatural

\f0\fs28 \cf0 ## Finishing Up\
\
Listening to the sound we're producing so far, it's just a little off. It's a little too low-sounding. To clean this up we'll use another filter, a high-pass filter. A high pass filter allows frequencies above a certain point through, and attenuates lower frequencies. This would be like turning the bass all the way down on your radio.\
\
To add this object, disconnect the "catch~ out" object and put an object with the text "hip~ 2200" between the "catch~" and the "output~". Listen to it and see if it doesn't sound a little more like what we want. If you'd like, edit the frequency, but switching to edit mode and double-clicking inside the "hip~" object to change the argument.\
\
## Recap\
\
So what we learned is that we can use Pd to make some realistic effects. We created a bacon sizzling effect by starting with noise, subtracting away some frequencies we didn't want to hear, and then finally tuning it a little bit to what we wanted to hear more of. \
\
Sound design is a lot of fun on its own, and it can add some magic to apps and games that you're producing. I hope this article helped you get an idea of how it works and interests you in giving it a try.  }